const { chromium } = require('playwright');
const path = require('path');

/**
 * Fun√ß√£o principal que automatiza a busca e o coment√°rio em um v√≠deo do YouTube.
 * @param {string} videoTitle - O t√≠tulo ou termo de busca para o v√≠deo.
 * @param {string} commentText - O texto a ser postado no coment√°rio.
 * @param {number} videoIndex - O √≠ndice do v√≠deo a ser clicado (0 = primeiro, 1 = segundo, etc.).
 */

async function commentOnYouTubeVideo(videoTitle, commentText, videoIndex = 1) {
  const email = process.env.GOOGLE_EMAIL;
  const password = process.env.GOOGLE_PASSWORD;

  const userDataDir = path.join(__dirname, 'meu-perfil-chrome');
  const context = await chromium.launchPersistentContext(userDataDir, {
    headless: false,
    args: ['--disable-blink-features=AutomationControlled'],
  });
  const page = context.pages().length ? context.pages()[0] : await context.newPage();
  const wait = () => page.waitForTimeout(2000);

  try {
    console.log('üöÄ Navegando para o YouTube...');
    await page.goto('https://www.youtube.com');

    // --- L√ìGICA DE LOGIN H√çBRIDA ---
    try {
      // TENTATIVA R√ÅPIDA: Tenta encontrar o avatar usando o perfil salvo
      console.log('üîé Verificando login via perfil salvo (tentativa r√°pida)...');
      await page.waitForSelector('button#avatar-btn', { timeout: 5000 });
      console.log('‚úÖ Login via perfil salvo bem-sucedido!');

    } catch (error) {
      // PLANO B: Se a tentativa r√°pida falhou, executa o login program√°tico
      console.log('‚ö†Ô∏è Perfil salvo n√£o funcionou ou expirou. Iniciando login program√°tico...');
      
      if (!email || !password) {
        throw new Error('Login via perfil falhou e as vari√°veis de ambiente GOOGLE_EMAIL e GOOGLE_PASSWORD n√£o foram definidas.');
      }

      await page.goto('https://accounts.google.com/signin/v2/identifier?flowName=GlifWebSignIn&flowEntry=ServiceLogin');
      
      await page.getByLabel('E-mail ou telefone').pressSequentially(email, { delay: 50 });
      await page.getByRole('button', { name: 'Avan√ßar' }).click();
      
      const passwordInput = page.getByLabel('Digite sua senha');
      await passwordInput.waitFor({ state: 'visible', timeout: 15000 });
      await passwordInput.pressSequentially(password, { delay: 50 });
      await page.getByRole('button', { name: 'Avan√ßar' }).click();
      
      // Verifica√ß√£o final do login program√°tico
      await page.goto('https://www.youtube.com');
      await page.waitForSelector('button#avatar-btn', { timeout: 20000 });
      console.log('‚úÖ Login program√°tico bem-sucedido!');
    }

    await page.getByRole('combobox', { name: 'Pesquisar' }).click();
    await wait();

    await page.getByRole('combobox', { name: 'Pesquisar' }).fill(videoTitle); 
    await wait();

    await page.getByRole('combobox', { name: 'Pesquisar' }).press('Enter');
    await wait();

    await page.getByRole('button', { name: 'Filtros de enquete' }).click(); 
    await wait();

    await page.getByRole('link', { name: 'V√≠deo', exact: true }).click();
    await wait();

    await page.getByRole('button', { name: 'Filtros de enquete' }).click(); 
    await wait();

    await page.getByRole('link', { name: 'a 20 minutos' }).click(); 
    await wait();

    await page.getByRole('button', { name: 'Filtros de enquete' }).click();
    await wait();

    await page.getByRole('link', { name: '√öltima hora' }).click();
    await wait();

    await page.locator('ytd-video-renderer a#video-title').nth(videoIndex).click();
    await wait();

    await page.waitForURL('**/watch?v=**');
    const finalUrl = page.url(); 
    console.log(`üîó Link final capturado: ${finalUrl}`);

    await page.keyboard.press('PageDown');
    await wait();

    await page.getByText('Adicione um coment√°rio‚Ä¶').click();
    await wait();

    await page.getByLabel('Adicione um coment√°rio‚Ä¶').fill(commentText); 
    await wait();

    await page.getByRole('button', { name: 'Comentar' }).click();
    console.log(`‚úîÔ∏è Coment√°rio "${commentText}" enviado com sucesso!`);

    return finalUrl;


  } catch (error) {
    console.error('‚ùå Ocorreu um erro durante a automa√ß√£o:', error.message);
    if (error.message.includes('button#avatar-btn')) {
        console.log('\n‚ùóÔ∏è --- A√á√ÉO NECESS√ÅRIA: FA√áA O LOGIN --- ‚ùóÔ∏è');
    }
  } finally {
    console.log('\nScript finalizado. A janela fechar√° em 15 segundos.');
    await page.waitForTimeout(15000);
    await context.close();
  }
}

module.exports = { commentOnYouTubeVideo };

if (require.main === module) {
  (async () => {
    const tituloParaTeste = "viagem para o jap√£o";
    const comentarioParaTeste = "Que v√≠deo incr√≠vel!";
    
    await commentOnYouTubeVideo(tituloParaTeste, comentarioParaTeste, 0);
  })();
}