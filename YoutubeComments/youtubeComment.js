const { chromium } = require('playwright');
const path = require('path');
const fs = require('fs');
require('dotenv').config();

/**
 * Fun√ß√£o principal que automatiza a busca e o coment√°rio em um v√≠deo do YouTube.
 * @param {string} videoTitle - O t√≠tulo ou termo de busca para o v√≠deo.
 * @param {string} commentText - O texto a ser postado no coment√°rio.
 * @param {number} videoIndex - O √≠ndice do v√≠deo a ser clicado (0 = primeiro, 1 = segundo, etc.).
 */

async function commentOnYouTubeVideo(videoTitle, commentText, videoIndex = 1) {
  // Inicia um navegador novo, do zero, em modo headless
  const browser = await chromium.launch({ headless: false });
  const context = await browser.newContext();
  const page = await context.newPage();
  const wait = () => page.waitForTimeout(2000);

  try {
    // --- L√ìGICA DE LOGIN COM COOKIES ---
    console.log('üç™ Carregando cookies de autentica√ß√£o...');
    
    // L√™ o arquivo de cookies
    const cookiesFilePath = path.join(__dirname, 'cookies.json');
    if (!fs.existsSync(cookiesFilePath)) {
      throw new Error('Arquivo "cookies.json" n√£o encontrado. Execute o script "salvar-cookies.js" primeiro.');
    }
    const cookies = JSON.parse(fs.readFileSync(cookiesFilePath, 'utf8'));
    
    // Adiciona os cookies ao contexto do navegador
    await context.addCookies(cookies);
    console.log('...Cookies injetados.');

    // Navega para o YouTube J√Å LOGADO
    await page.goto('https://www.youtube.com');
    
    // Confirma que o login funcionou
    await page.waitForSelector('button#avatar-btn', { timeout: 15000 });
    console.log('‚úÖ Login via cookies bem-sucedido!');
    

    await page.getByRole('combobox', { name: 'Pesquisar',  timeout: 15000 }).click();
    await wait();

    await page.getByRole('combobox', { name: 'Pesquisar',  timeout: 15000 }).fill(videoTitle); 
    await wait();

    await page.getByRole('combobox', { name: 'Pesquisar',  timeout: 15000 }).press('Enter');
    await wait();

    await page.getByRole('button', { name: 'Filtros de enquete',  timeout: 15000 }).click(); 
    await wait();

    await page.getByRole('link', { name: 'V√≠deo', exact: true,  timeout: 15000 }).click();
    await wait();

    await page.getByRole('button', { name: 'Filtros de enquete',  timeout: 15000 }).click(); 
    await wait();

    await page.getByRole('link', { name: 'a 20 minutos',  timeout: 15000 }).click(); 
    await wait();

    await page.getByRole('button', { name: 'Filtros de enquete',  timeout: 15000 }).click();
    await wait();

    await page.getByRole('link', { name: '√öltima hora',  timeout: 15000 }).click();
    await wait();

    await page.locator('ytd-video-renderer a#video-title', { timeout: 15000 }).nth(videoIndex).click();
    await wait();

    await page.waitForURL('**/watch?v=**', { timeout: 15000 });
    const finalUrl = page.url(); 
    console.log(`üîó Link final capturado: ${finalUrl}`);

    await page.keyboard.press('PageDown', { timeout: 15000 });
    await wait();

    await page.getByText('Adicione um coment√°rio‚Ä¶', { timeout: 15000 }).click();
    await wait();

    await page.getByLabel('Adicione um coment√°rio‚Ä¶', { timeout: 15000 }).fill(commentText); 
    await wait();

    await page.getByRole('button', { name: 'Comentar',  timeout: 15000 }).click();
    console.log(`‚úîÔ∏è Coment√°rio "${commentText}" enviado com sucesso!`);

    return finalUrl;


  } catch (error) {
    console.error('‚ùå Ocorreu um erro durante a automa√ß√£o:', error.message);
    if (error.message.includes('button#avatar-btn', { timeout: 15000 })) {
        console.log('\n‚ùóÔ∏è --- A√á√ÉO NECESS√ÅRIA: FA√áA O LOGIN --- ‚ùóÔ∏è');
    }
  } finally {
    console.log('\nScript finalizado. A janela fechar√° em 15 segundos.');
    await page.waitForTimeout(15000);
    await context.close();
  }
}

module.exports = { commentOnYouTubeVideo };

if (require.main === module) {
  (async () => {
    const tituloParaTeste = "viagem para o jap√£o";
    const comentarioParaTeste = "Que v√≠deo incr√≠vel!";
    
    await commentOnYouTubeVideo(tituloParaTeste, comentarioParaTeste, 0);
  })();
}